/*****************************************************************************
 * bsp.c for Lab2A of ECE 153a at UCSB
 * Date of the Last Update:  October 27,2019
 *****************************************************************************/

/**/
#include <stdio.h>
#include <math.h>
#include "qpn_port.h"
#include "bsp.h"
#include "lab2a.h"
#include "xintc.h"
#include <stdbool.h>
#include <stdlib.h>
#include <mb_interface.h>
#include <xil_types.h>
#include <xil_assert.h>
#include <xio.h>
#include "fft.h"
#include "note.h"
#include "stream_grabber.h"
#include "trig.h"
#include "xil_exception.h"
#include "xparameters.h" // Contains hardware addresses and bit masks
#include "xil_cache.h"	 // Cache Drivers
#include "xtmrctr.h"	 // Timer Drivers
#include "xtmrctr_l.h"	 // Low-level timer drivers
#include "xil_printf.h"	 // Used for xil_printf()
#include "xgpio.h"		 // LED driver, used for General purpose I/i
#include "xspi.h"
#include "xspi_l.h"
#include "lcd.h"

/*****************************/

#define GPIO_CHANNEL 1
#define SAMPLES 512		  // AXI4 Streaming Data FIFO has a depth of 512 samples
#define M 7				  // 2^M = SAMPLES
#define CLOCK 100000000.0 // clock frequency
#define DEC 4

/* Define all variables and Gpio objects here  */
XIntc sys_intctr; // interrupt controller
XGpio enc_gpio;	  // encoder gpio
XGpio btn_gpio;
u32 a;
int state = 0;
int btn;
int aValue;
extern int octave;

XTmrCtr sys_tmrctr;
Xuint32 data;
unsigned int time = 0;
unsigned int ledNum = 1;

XGpio led;
int delayed = 0;
int ledOn = 1;
int bgNum;

void ledToggle()
{
	if (ledOn)
	{
		XGpio_DiscreteWrite(&led, 1, 0);
		ledOn = 0;
	}
	else
	{
		XGpio_DiscreteWrite(&led, 1, ledNum);
		ledOn = 1;
	}
}

void ledRight()
{
	if (ledOn)
	{
		if (ledNum == 1)
		{
			ledNum = 65536;
		}
		if (ledNum > 0)
		{
			ledNum = ledNum >> 1;
		}
		XGpio_DiscreteWrite(&led, 1, ledNum);
	}
}

void ledLeft()
{
	if (ledOn)
	{
		if (ledNum == 0x8000)
		{
			ledNum = 1;
		}
		else if (ledNum < 65536)
		{
			ledNum = ledNum << 1;
		}
		XGpio_DiscreteWrite(&led, 1, ledNum);
	}
}

/*..........................................................................*/
void BSP_init(void)
{

	u32 controlReg;
	XSpi_Config *spiConfig;

	XGpio_Initialize(&led, XPAR_AXI_GPIO_LED_DEVICE_ID);

	/* ----- Initialize Interrupt ----- */
	XIntc_Initialize(&sys_intctr, XPAR_INTC_0_DEVICE_ID);
	XIntc_Start(&sys_intctr, XIN_REAL_MODE);

	/* ----- Initialize ENCODER ----- */
	XGpio_Initialize(&enc_gpio, XPAR_AXI_GPIO_ENCODER_DEVICE_ID);
	XIntc_Connect(&sys_intctr, XPAR_INTC_0_GPIO_2_VEC_ID, (Xil_ExceptionHandler)TwistHandler, &enc_gpio);
	XIntc_Enable(&sys_intctr, XPAR_INTC_0_GPIO_2_VEC_ID);
	XGpio_InterruptEnable(&enc_gpio, GPIO_CHANNEL);
	XGpio_InterruptGlobalEnable(&enc_gpio);

	/*  ----- Intialize Button ----- */
	XGpio_Initialize(&btn_gpio, XPAR_AXI_GPIO_BTN_DEVICE_ID);
	XIntc_Connect(&sys_intctr, XPAR_INTC_0_GPIO_1_VEC_ID, (Xil_ExceptionHandler)GpioHandler, &btn_gpio);
	XIntc_Enable(&sys_intctr, XPAR_INTC_0_GPIO_1_VEC_ID);

	XGpio_InterruptEnable(&btn_gpio, GPIO_CHANNEL);
	XGpio_InterruptGlobalEnable(&btn_gpio);

	/* ----- New Timer Setup ----- */
	XTmrCtr_Initialize(&sys_tmrctr, XPAR_AXI_TIMER_0_DEVICE_ID);
	XIntc_Connect(&sys_intctr, XPAR_MICROBLAZE_0_AXI_INTC_AXI_TIMER_0_INTERRUPT_INTR,
				  (XInterruptHandler)XTmrCtr_InterruptHandler,
				  (void *)&sys_tmrctr);
	XIntc_Enable(&sys_intctr, XPAR_MICROBLAZE_0_AXI_INTC_AXI_TIMER_0_INTERRUPT_INTR);
	XTmrCtr_SetHandler(&sys_tmrctr, extra_handler, &sys_tmrctr);
	XTmrCtr_SetOptions(&sys_tmrctr, 0,
					   XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);
	XTmrCtr_SetResetValue(&sys_tmrctr, 0, 0xFFFFFFFF - 100000);

	static XGpio dc;
	static XSpi spi;

	/* ----- Initialize LCD ----- */
	XGpio_Initialize(&dc, XPAR_SPI_DC_DEVICE_ID);
	XGpio_SetDataDirection(&dc, 1, 0x0);
	spiConfig = XSpi_LookupConfig(XPAR_SPI_DEVICE_ID);
	XSpi_CfgInitialize(&spi, spiConfig, spiConfig->BaseAddress);
	XSpi_Reset(&spi);
	controlReg = XSpi_GetControlReg(&spi);
	XSpi_SetControlReg(&spi,
					   (controlReg | XSP_CR_ENABLE_MASK | XSP_CR_MASTER_MODE_MASK) &
						   (~XSP_CR_TRANS_INHIBIT_MASK));
	XSpi_SetSlaveSelectReg(&spi, ~0x01);

	/* ----- Initialize MICROBLAZE ----- */
	microblaze_register_handler((XInterruptHandler)XIntc_DeviceInterruptHandler,
								(void *)XPAR_MICROBLAZE_0_AXI_INTC_DEVICE_ID);
	microblaze_enable_interrupts();

	initLCD();
	clrScr();
}

/*..........................................................................*/
void QF_onStartup(void)
{ /* entered with interrupts locked */

	/* Enable interrupts */
	xil_printf("\n\rQF_onStartup\n\r"); // Comment out once you are in your complete program
	InitLUT();
	stream_grabber_start();
	setOctave(0);
	aValue = 440;
	xil_printf("ready to run\n\r");
	canHistogram = 0;
}

/* .............................................................. */
int int_buffer[SAMPLES / DEC];
static float q[SAMPLES / DEC];
static float w[SAMPLES / DEC];

extern bool FFTActive;
extern bool Auto;
int int_buffer2[128];
static float q2[128];
static float w2[128];

int int_bufferMod1[16];
static float qMod1[16];
static float wMod1[16];

int int_bufferMod2[32];
static float qMod2[32];
static float wMod2[32];

int int_bufferMod3[64];
static float qMod3[64];
static float wMod3[64];

int int_bufferMod4[128];
static float qMod4[128];
static float wMod4[128];

int int_bufferMod5[128];
static float qMod5[128];
static float wMod5[128];

int int_bufferMod6[128];
static float qMod6[128];
static float wMod6[128];

int int_bufferMod7[128];
static float qMod7[128];
static float wMod7[128];

int int_bufferMod8[128];
static float qMod8[128];
static float wMod8[128];

int l;
int ticks; // used for timer
uint32_t Control;
float frequency;
float frequency2;
int extfreq;
float tot_time; // time to run fft
float sample_f2;
int decimate = 32;
int mVal = 7;
int sampleVal = 4096;

void read_fsl_values(float *q, float *q2, int n, int n2, int *int_buffer2, int decimate)
{
	unsigned int x;
	unsigned int x2;
	stream_grabber_wait_enough_samples(512);
	int sum = 0;
	int sum2 = 0;
	
	for (int i = 0; i < n; i++)
	{
		sum += stream_grabber_read_sample(i);
		if ((i + 1) % DEC == 0)
		{
			int_buffer[i / DEC] = sum / DEC;
			sum = 0;
			x = int_buffer[i / DEC];
			q[i / DEC] = 3.3 * x / 67108864.0;
		}
	}

	for (int i = 0; i < n2; i++)
	{
		sum2 += stream_grabber_read_sample(i);
		if ((i + 1) % decimate == 0)
		{
			int_buffer2[i / decimate] = sum2 / decimate;
			sum2 = 0;
			x2 = int_buffer2[i / decimate];
			q2[i / decimate] = 3.3 * x2 / 67108864.0;
		}
	}
}

void QF_onIdle(void)
{ /* entered with interrupts locked */

	QF_INT_UNLOCK(); /* unlock interrupts */

	{
		if (FFTActive && Auto)
		{
			sample_f2 = 100 * 1000 * 1000 / (2048.0);

			if (octaveSelect == 1)
			{
				sampleVal = 4096;
				mVal = 4;
				decimate = 256;
				read_fsl_values(q, qMod1, SAMPLES, sampleVal, int_bufferMod1, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod1[i] = 0;
				}
				frequency2 = fft(qMod1, wMod1, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octaveSelect == 2)
			{
				sampleVal = 4096;
				mVal = 5;
				decimate = 128;
				read_fsl_values(q, qMod2, SAMPLES, sampleVal, int_bufferMod2, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod2[i] = 0;
				}
				frequency2 = fft(qMod2, wMod2, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octaveSelect == 3)
			{
				sampleVal = 4096;
				mVal = 6;
				decimate = 64;
				read_fsl_values(q, qMod3, SAMPLES, sampleVal, int_bufferMod3, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod3[i] = 0;
				}
				frequency2 = fft(qMod3, wMod3, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octaveSelect == 4)
			{
				sampleVal = 4096;
				mVal = 7;
				decimate = 32;
				read_fsl_values(q, qMod4, SAMPLES, sampleVal, int_bufferMod4, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod4[i] = 0;
				}
				frequency2 = fft(qMod4, wMod4, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octaveSelect == 5)
			{
				sampleVal = 2048;
				mVal = 7;
				decimate = 16;
				read_fsl_values(q, qMod5, SAMPLES, sampleVal, int_bufferMod5, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod5[i] = 0;
				}
				frequency2 = fft(qMod5, wMod5, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octaveSelect == 6)
			{
				sampleVal = 1024;
				mVal = 7;
				decimate = 8;
				read_fsl_values(q, qMod6, SAMPLES, sampleVal, int_bufferMod6, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod6[i] = 0;
				}
				frequency2 = fft(qMod6, wMod6, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octaveSelect == 7)
			{
				sampleVal = 512;
				mVal = 7;
				decimate = 4;
				read_fsl_values(q, qMod7, SAMPLES, sampleVal, int_bufferMod7, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod7[i] = 0;
				}
				frequency2 = fft(qMod7, wMod7, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octaveSelect == 8)
			{
				sampleVal = 4096;
				mVal = 7;
				decimate = 2;
				read_fsl_values(q, qMod8, SAMPLES, sampleVal, int_bufferMod8, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod8[i] = 0;
				}
				frequency2 = fft(qMod8, wMod8, sampleVal / decimate, mVal, sample_f2);
			}
			else
			{
				sampleVal = 4096;
				mVal = 7;
				decimate = 32;
				read_fsl_values(q, q2, SAMPLES, sampleVal, int_buffer2, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					w2[i] = 0;
				}
				frequency2 = fft(q2, w2, sampleVal / decimate, mVal, sample_f2);
			}
			float cutoff = sample_f2 / 2;
			if (frequency < cutoff)
			{
				frequency = frequency2;
			}

			extfreq = (int)frequency2;
			findNote(frequency);
		}
		QActive_postISR((QActive *)&AO_Lab2A, IDLE);

		if (FFTActive && !Auto)
		{
			sample_f2 = 100 * 1000 * 1000 / (2048.0);

			if (octave == 1)
			{
				sampleVal = 4096;
				mVal = 4;
				decimate = 300;
				read_fsl_values(q, qMod1, SAMPLES, sampleVal, int_bufferMod1, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod1[i] = 0;
				}
				frequency2 = fft(qMod1, wMod1, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octave == 2)
			{
				sampleVal = 4096;
				mVal = 5;
				decimate = 128;
				read_fsl_values(q, qMod2, SAMPLES, sampleVal, int_bufferMod2, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod2[i] = 0;
				}
				frequency2 = fft(qMod2, wMod2, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octave == 3)
			{
				sampleVal = 4096;
				mVal = 6;
				decimate = 64;
				read_fsl_values(q, qMod3, SAMPLES, sampleVal, int_bufferMod3, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod3[i] = 0;
				}
				frequency2 = fft(qMod3, wMod3, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octave == 4)
			{
				sampleVal = 4096;
				mVal = 7;
				decimate = 32;
				read_fsl_values(q, qMod4, SAMPLES, sampleVal, int_bufferMod4, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod4[i] = 0;
				}
				frequency2 = fft(qMod4, wMod4, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octave == 5)
			{
				sampleVal = 2048;
				mVal = 7;
				decimate = 16;
				read_fsl_values(q, qMod5, SAMPLES, sampleVal, int_bufferMod5, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod5[i] = 0;
				}
				frequency2 = fft(qMod5, wMod5, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octave == 6)
			{
				sampleVal = 1024;
				mVal = 7;
				decimate = 8;
				read_fsl_values(q, qMod6, SAMPLES, sampleVal, int_bufferMod6, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod6[i] = 0;
				}
				frequency2 = fft(qMod6, wMod6, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octave == 7)
			{
				sampleVal = 512;
				mVal = 7;
				decimate = 4;
				read_fsl_values(q, qMod7, SAMPLES, sampleVal, int_bufferMod7, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod7[i] = 0;
				}
				frequency2 = fft(qMod7, wMod7, sampleVal / decimate, mVal, sample_f2);
			}
			else if (octave == 8)
			{
				sampleVal = 4096;
				mVal = 7;
				decimate = 2;
				read_fsl_values(q, qMod8, SAMPLES, sampleVal, int_bufferMod8, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					wMod8[i] = 0;
				}
				frequency2 = fft(qMod8, wMod8, sampleVal / decimate, mVal, sample_f2);
			}
			else
			{
				sampleVal = 4096;
				mVal = 7;
				decimate = 32;
				read_fsl_values(q, q2, SAMPLES, sampleVal, int_buffer2, decimate);
				stream_grabber_start();
				sample_f2 /= decimate;
				for (int i = 0; i < sampleVal / decimate; i++)
				{
					w2[i] = 0;
				}
				frequency2 = fft(q2, w2, sampleVal / decimate, mVal, sample_f2);
			}
			float cutoff = sample_f2 / 2;
			if (frequency < cutoff)
			{
				frequency = frequency2;
			}
			extfreq = (int)frequency2;
			findNote(frequency);
		}
		QActive_postISR((QActive *)&AO_Lab2A, IDLE);
	}
}

/* Do not touch Q_onAssert */
/*..........................................................................*/
void Q_onAssert(char const Q_ROM *const Q_ROM_VAR file, int line)
{
	(void)file; /* avoid compiler warning */
	(void)line; /* avoid compiler warning */
	QF_INT_LOCK();
	for (;;)
	{
	}
}

/* Interrupt handler functions here.  Do not forget to include them in lab2a.h!
To post an event from an ISR, use this template:
QActive_postISR((QActive *)&AO_Lab2A, SIGNALHERE);
Where the Signals are defined in lab2a.h  */

/******************************************************************************
 *
 * This is the interrupt handler routine for the GPIO for this example.
 *
 ******************************************************************************/
void TwistHandler(void *CallbackRef)
{
	time = 0;
	XTmrCtr_Start(&sys_tmrctr, 0);
	if (!delayed)
	{
		delayed = 1;
	}
	int encoderStatus = XGpio_DiscreteRead(&enc_gpio, GPIO_CHANNEL);
	switch (state)
	{
	case 0:
		if (encoderStatus == 1)
		{
			state = 1;
		}
		else if (encoderStatus == 2)
		{
			state = 4;
		}
		break;
	case 1:
		if (encoderStatus == 0)
		{
			state = 2;
		}
		else if (encoderStatus == 3)
		{
			state = 0;
		}
		break;
	case 2:
		if (encoderStatus == 2)
		{
			state = 3;
		}
		break;
	case 3:
		if (encoderStatus == 3)
		{
			state = 0;
			ledRight();
			QActive_postISR((QActive *)&AO_Lab2A, ENCODER_DOWN);
		}
		break;
	case 4:
		if (encoderStatus == 0)
		{
			state = 5;
		}
		else if (encoderStatus == 3)
		{
			state = 0;
		}
		break;
	case 5:
		if (encoderStatus == 1)
		{
			state = 6;
		}
		break;
	case 6:
		if (encoderStatus == 3)
		{
			state = 0;
			ledLeft();
			QActive_postISR((QActive *)&AO_Lab2A, ENCODER_UP);
		}
		break;
	}
	if (encoderStatus == 7)
	{
		QActive_postISR((QActive *)&AO_Lab2A, ENCODER_CLICK);
	}

	XGpio_InterruptClear(&enc_gpio, XGPIO_IR_MASK); // Clearing interrupt
}

void GpioHandler(void *CallbackRef)
{
	time = 0;
	XTmrCtr_Start(&sys_tmrctr, 0);
	btn = XGpio_DiscreteRead(&btn_gpio, GPIO_CHANNEL);

	if (btn == 1)
	{
		QActive_postISR((QActive *)&AO_Lab2A, BTN_UP);
	}
	if (btn == 2)
	{
		QActive_postISR((QActive *)&AO_Lab2A, BTN_LEFT);
	}
	if (btn == 4)
	{
		QActive_postISR((QActive *)&AO_Lab2A, BTN_RIGHT);
	}
	if (btn == 8)
	{
		QActive_postISR((QActive *)&AO_Lab2A, BTN_DOWN);
	}
	if (btn == 16)
	{
		QActive_postISR((QActive *)&AO_Lab2A, BTN_CENTER);
	}
	XGpio_InterruptClear(&btn_gpio, XGPIO_IR_MASK); // Clearing interrupt
}

// TODO Possible mess up here
void extra_handler(void *CallbackRef)
{
	Xuint32 Control;
	Control = XTimerCtr_ReadReg(sys_tmrctr.BaseAddress, 0, XTC_TCSR_OFFSET);
	time++;

	XTmrCtr_WriteReg(sys_tmrctr.BaseAddress, 0, XTC_TCSR_OFFSET, Control | XTC_CSR_INT_OCCURED_MASK);
}
